""" This modules manages HTTP interaction with the Trello API."""

import httplib2

class TrelloClient(object):
    """ Base class for Trello API access."""

    def __init__(self, api_key, token, api_secret = None, token_secret = None):
        """
        Constructor

        :api_key: API key generated at https://trello.com/1/appKey/generate
        :oauth_token: OAuth token generated by the user

        """

        if api_key and api_secret and token and token_secret:
            # oauth
            self.oauth_consumer = oauth.Consumer(key = api_key, secret = api_secret)
            self.oauth_token = oauth.Token(key = token, secret = token_secret)
            self.client = oauth.Client(self.oauth_consumer, self.oauth_token)

        elif api_key and token:
            self.client = Http()

        self.api_key = api_key
        self.auth_token = token

    def is_oauth(self):
        return 

    def logout(self):
        """Log out of Trello. This method is idempotent."""

        # TODO: refactor
        pass
        #if not self._cookie:
            #return

        #headers = {'Cookie': self._cookie, 'Accept': 'application/json'}
        #response, content = self.client.request(
                #'https://trello.com/logout',
                #'GET',
                #headers = headers,
                #)

        ## TODO: error checking
        #self._cookie = None

    def build_url(self, path):
        """
        Builds a Trello URL.

        :path: URL path

        """

        if hasattr(self, 'oauth_token'):
            k = self.oauth_token.key
            t = self.oauth_consumer.key
        else:
            k = self.api_key
            t = self.auth_token

        url = 'https://api.trello.com/1%(path)s?key=%(key)s&token=%(token)s' % {'path':path, 'key':k, 'token':t}

        return url

